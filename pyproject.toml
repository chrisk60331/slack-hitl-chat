[project]
name = "agentcore-marketplace"
version = "0.1.0"
description = "AWS Bedrock AgentCore-based human-in-the-loop system"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}

dependencies = [
    "bedrock-agentcore-starter-toolkit>=0.1.0",
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "pydantic>=2.5.0",
    "python-json-logger>=2.0.0",
    "structlog>=23.2.0",
    "polars>=0.20.0",
    "click>=8.1.0",
    "requests>=2.31.0",
    "mcp>=1.0.0",
    "httpx>=0.28.1",
    "jira>=3.6.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    # Google MCP dependencies
    "fastmcp>=2.8.1",
    "fastapi>=0.109.2",
    "uvicorn>=0.27.1",
    "mangum>=0.17.0",
    "google-api-python-client>=2.164.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.1",
    "pydantic-settings>=2.9.1",
    "email-validator>=2.1.0.post1",
    "python-dotenv>=1.0.1",
    "watchfiles>=1.0.5",
    "fastapi-azure-auth>=5.1.1",
    "pydantic-ai>=0.0.12",
    # GIF MCP dependencies
    "pillow>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.28.1",
    "moto[all]>=4.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project.scripts]
hitl-mcp = "src.cli:cli"


[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: mark test as asyncio",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
target-version = ["py311"]
line-length = 79
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  migrations
  | .venv
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 79
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true 

[dependency-groups]
dev = [
    "ruff>=0.12.7",
]
